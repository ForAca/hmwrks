HEeadeR for test file
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main(){
    int ret1;

    ret1 = fork();


    if (ret1 > 0) {
        printf(Hello from parent process- PID: %d parent PID: %dn, ret1, getpid(), getppid());
    } else {
        printf(Hello from child process- PID: %d parent PID: %dn, ret1, getpid(), getppid());
    }
    int ret2;

    ret2 = fork();
    

    if (ret2 > 0) {
        printf(Hello from parent process- PID: %d parent PID: %dn, ret2, getpid(), getppid());
    } else {
        printf(Hello from child process- PID: %d parent PID: %dn, ret2, getpid(), getppid());
    }
    int ret3;
    
    ret3 = fork();


    if (ret3 > 0) {
        printf(Hello from parent process- PID: %d parent PID: %dn, ret3, getpid(), getppid());
    } else {
        printf(Hello from child process- PID: %d parent PID: %dn, ret3, getpid(), getppid());
    }

    sleep(1);
    
    return 0;
}
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>


int main(){
    pid_t ret1, ret2;

    ret1 = fork();

    if (ret1 > 0) {
        wait(NULL);

        ret2 = fork();
        if (ret2 > 0) {
            wait(NULL);

            waitpid(ret2, NULL, 0);
            printf(Parent process donen);
        } else {
            waitpid(ret1, NULL, 0);
            execl(/bin/date, date, +%Y-%m-%d, (char *)NULL);

            perror(execl failed);
            exit(1);
        }
    } else {
        execl(/bin/ls, ls, ., (char*)NULL);

        perror(execl failed);
        exit(1);
    }
    
    return 0;
}
